CHIEDO SCUSA MA È IN ITALIANO, LA DEVO SCRIVERE IN INGLESE !!!!


Benvenuto nel mondo di G-FRAMEWORK!

Con G-FRAMEWORK puoi creare da subito applicazioni Web in modo semplice e 
immediato.

Nasce principalmnte per sviluppare applicazioni "Cloud Computing" comunque 
permette di sviluppare qualsiasi tipo di interazione client server veicolata 
tramite il Web.

G-FRAMEWORK è un ambiente di sviluppo orientato alla convergenza delle 
tecnologie per il Web. La strada percorsa da G-FRAMEWORK è verso un puro 
approccio MVC ( Model Viev Controller ) infatti troviamo richiami a questa
struttura all'interno dei progetti.

LOGICA

Uno dei principali motivi della nascita di G-FRAMEWORK è il tentativo di fondere
verticalmente tutte le tecnologie ed i linguaggi per il Web consentendo allo 
sviluppatore di usare un unico  stile di programmazione senza passare 
costantemente da html-php-javascript all'interno delle proprie pagine.

G-FRAMEWORK si fonda sul concetto di Webget ovvero oggetti per il Web autonomi
che possono interagire fra loro, costituiti da un mix di html-php-javascript.
Lo sviluppatore non necessita di sapere come sono fatti, l'unica sua 
preoccupazione è conoscere le specifiche caratteristiche di ogni Webget che 
necessita di usare.




STRUTTURA

G-FRAMEWORK è contenuto tutto dentro un unica directory principale; spostala 
dove vuoi non c'è bisogno di procedure di installazione.

Questa directory contiene sempre a sua volta tre sotto directory :


	core    : dove è contenuto il motore G-FRAMEWORK
	default : dove è contenuto il progetto predefinito che deve essere avviato 
						una volta entrati nella directory
	doc     : che contiene questo ed altri documenti

	altre sotto directory sono solitamente altri progetti.

Directory 'core'
	
	Questa directory contiene diversi file che costituiscono il cuore di G-FRAMEWORK:
	
	engine    : è il motore del framework è fatto a moduli e contiene tutti il
					    necessario. È come se forre il kernel.

	webgets   : quì ci sono i webgets organizzati in sotto-directory, engine si
					    occupa di chiamare i webgets in base al codice delle views

	rpc_calls : quì ci sono le librerie RPC, un'altra delle cose belle del frame-
							work. Le RPC possono essere chiamate sia dal server che dal client
							indistintamente.

	jss				: quì c'è tutto il codice javascript, non è ancora ben organizzato,
							ma una delle altre belle caratteristiche è la possibilità di 
							importare codice javascript all'occorenza direttamente dal client
							con la funzione $_.import senza ricaricare la pagina
